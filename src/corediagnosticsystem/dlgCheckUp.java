/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package corediagnosticsystem;

import classes.CommonMethod;
import classes.DBQueries;
import classes.GlobalVariables;
import classes.JComboBoxSetter;
import static corediagnosticsystem.dlgPatientNew.INSERT;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Date;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACC
 */
public class dlgCheckUp extends javax.swing.JDialog {

    private frmMain main;
    private NumberFormat formatter = new DecimalFormat("#,##0.00");//the formatter
    private double totalAmount = 0;
    private SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");

    /**
     * Creates new form dlgCheckUp
     */
    public dlgCheckUp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    dlgCheckUp(frmMain parent, boolean modal, String patientID, String patientName) {
        super(parent, modal);
        initComponents();
        this.main = (frmMain) parent;
        CommonMethod.setDialogScreenLocation(main, this);
        lblPatientID.setText(patientID);
        lblPatientName.setText(patientName);
        //txtCellphoneNo.setDocument(new JTextFieldLimit(11));
        //CommonMethod.getAutoEmployeeID(lblEmployeeID);
        //show laboratoriest
        showLaboratories();
        //show consultation fees
        // totalAmount += CommonMethod.consultationFee();
        //txtConsultationFee.setText("" + formatter.format(CommonMethod.consultationFee()));
        //txtTotal.setText("" + formatter.format(totalAmount));
        //txtTotalDue.setText("" + formatter.format(totalAmount));
        CommonMethod.getAutoCheckupID(lblTransactionID);
        CommonMethod.getServerDate(lblCheckupDate);
        ComponentState(false);
    }

    private void showLaboratories() {
        DefaultTableModel model = (DefaultTableModel) tbLaboratoryList.getModel();
        int row = 0;
        DBQueries db = new DBQueries();
        try {
            db.ConnectToDatabase();
            db.queryLaboratoryListForCheckUp();
            CommonMethod.clearTable(tbLaboratoryList);
            while (db.rs.next()) {
                model.insertRow(row++, new Object[]{false, db.rs.getString("lab_id"), db.rs.getString("lab_name"), db.rs.getString("lab_amount")});
            }
            if (row == 0) {
                model.insertRow(row++, new Object[]{"", "", "<html><b color='red'>NO RESULTS FOUND...</b></html>"});
            }
        } catch (SQLException e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (db.con != null) {
                db.closeConnection();
            }

        }
    }

    private void ComponentState(boolean status) {
        txtTotal.setEnabled(status);
        btnRemoveDiscount.setEnabled(status);
        txtLess.setEnabled(status);
        txtTotalDue.setEnabled(status);
        txtTendered.setEnabled(status);
        txtChange.setEnabled(status);
        btnSave.setEnabled(status);
    }

    private void executeSave() {
        int checkupID = Integer.parseInt(lblTransactionID.getText());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel11 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblPatientID = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbLaboratoryList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbSelectedLaboratory = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        txtTotal = new javax.swing.JTextField();
        txtLess = new javax.swing.JTextField();
        txtTotalDue = new javax.swing.JTextField();
        txtTendered = new javax.swing.JFormattedTextField();
        txtChange = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        lblDiscount = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        lblPercentageDiscount = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblChangeBalance = new javax.swing.JLabel();
        btnRemoveDiscount = new javax.swing.JLabel();
        lblCheckupDate = new javax.swing.JLabel();
        lblTransactionID = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CORE Diagnostic and Urgent Care Center, Inc.");
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(588, 50));
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jSeparator1, java.awt.BorderLayout.PAGE_END);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 18)); // NOI18N
        jLabel3.setText("    Adding Check-Up/Lab.");
        jPanel11.add(jLabel3, java.awt.BorderLayout.WEST);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 15));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Patient ID:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(jLabel4);

        lblPatientID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPatientID.setForeground(new java.awt.Color(255, 51, 0));
        lblPatientID.setText("2018-0000001");
        lblPatientID.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(lblPatientID);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText(" ");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(jLabel8);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Patient Name:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(jLabel6);

        lblPatientName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPatientName.setForeground(new java.awt.Color(255, 0, 0));
        lblPatientName.setText("GERRY S. GOHIL, JR.");
        lblPatientName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(lblPatientName);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("  ");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel12.add(jLabel10);

        jPanel11.add(jPanel12, java.awt.BorderLayout.EAST);

        jPanel6.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel8.setLayout(new java.awt.BorderLayout());
        jPanel8.add(jSeparator2, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Laboratory & Fees"));

        tbLaboratoryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "Lab ID", "Laboratory Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbLaboratoryList.setRowHeight(25);
        tbLaboratoryList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbLaboratoryList);
        if (tbLaboratoryList.getColumnModel().getColumnCount() > 0) {
            tbLaboratoryList.getColumnModel().getColumn(0).setMinWidth(40);
            tbLaboratoryList.getColumnModel().getColumn(0).setPreferredWidth(40);
            tbLaboratoryList.getColumnModel().getColumn(0).setMaxWidth(40);
            tbLaboratoryList.getColumnModel().getColumn(1).setMinWidth(0);
            tbLaboratoryList.getColumnModel().getColumn(1).setPreferredWidth(0);
            tbLaboratoryList.getColumnModel().getColumn(1).setMaxWidth(0);
            tbLaboratoryList.getColumnModel().getColumn(3).setMinWidth(90);
            tbLaboratoryList.getColumnModel().getColumn(3).setPreferredWidth(90);
            tbLaboratoryList.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        jLabel1.setDisplayedMnemonic('E');
        jLabel1.setText("Search Laboratory:");

        txtSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Transaction"));

        tbSelectedLaboratory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Lab ID", "Added Laboratory", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSelectedLaboratory.setRowHeight(25);
        tbSelectedLaboratory.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tbSelectedLaboratory);
        if (tbSelectedLaboratory.getColumnModel().getColumnCount() > 0) {
            tbSelectedLaboratory.getColumnModel().getColumn(0).setMinWidth(40);
            tbSelectedLaboratory.getColumnModel().getColumn(0).setPreferredWidth(40);
            tbSelectedLaboratory.getColumnModel().getColumn(0).setMaxWidth(40);
            tbSelectedLaboratory.getColumnModel().getColumn(1).setMinWidth(0);
            tbSelectedLaboratory.getColumnModel().getColumn(1).setPreferredWidth(0);
            tbSelectedLaboratory.getColumnModel().getColumn(1).setMaxWidth(0);
            tbSelectedLaboratory.getColumnModel().getColumn(3).setMinWidth(90);
            tbSelectedLaboratory.getColumnModel().getColumn(3).setPreferredWidth(90);
            tbSelectedLaboratory.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        jPanel7.setLayout(new java.awt.GridLayout(5, 0, 0, 3));

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0.00");
        jPanel7.add(txtTotal);

        txtLess.setEditable(false);
        txtLess.setBackground(new java.awt.Color(255, 255, 255));
        txtLess.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtLess.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtLess.setText("0.00");
        txtLess.setName("NO DISCOUNT"); // NOI18N
        jPanel7.add(txtLess);

        txtTotalDue.setEditable(false);
        txtTotalDue.setBackground(new java.awt.Color(255, 255, 255));
        txtTotalDue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTotalDue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalDue.setText("0.00");
        jPanel7.add(txtTotalDue);

        txtTendered.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 0)));
        txtTendered.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        txtTendered.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTendered.setText("0.00");
        txtTendered.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtTendered.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTenderedFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTenderedFocusLost(evt);
            }
        });
        txtTendered.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTenderedKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTenderedKeyTyped(evt);
            }
        });
        jPanel7.add(txtTendered);

        txtChange.setEditable(false);
        txtChange.setBackground(new java.awt.Color(255, 255, 255));
        txtChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtChange.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtChange.setText("0.00");
        jPanel7.add(txtChange);

        jPanel10.setLayout(new java.awt.GridLayout(5, 0, 0, 3));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Total:");
        jPanel10.add(jLabel9);

        jPanel13.setLayout(new java.awt.GridLayout(1, 0));

        lblDiscount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDiscount.setText("Less:");
        lblDiscount.setName("1"); // NOI18N
        jPanel13.add(lblDiscount);
        lblDiscount.getAccessibleContext().setAccessibleName("NO DISCOUNT");
        lblDiscount.getAccessibleContext().setAccessibleDescription("");

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        lblPercentageDiscount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPercentageDiscount.setText("0");
        jPanel14.add(lblPercentageDiscount);

        jLabel15.setText("%");
        jPanel14.add(jLabel15);

        jPanel13.add(jPanel14);

        jPanel10.add(jPanel13);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Total Due:");
        jPanel10.add(jLabel12);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 153, 0));
        jLabel13.setText("Amount Tendered:");
        jPanel10.add(jLabel13);

        lblChangeBalance.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblChangeBalance.setText("Change:");
        jPanel10.add(lblChangeBalance);

        btnRemoveDiscount.setDisplayedMnemonic('A');
        btnRemoveDiscount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRemoveDiscount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnRemoveDiscount.setText("ADD DISCOUNT");
        btnRemoveDiscount.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRemoveDiscount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveDiscountMouseClicked(evt);
            }
        });
        btnRemoveDiscount.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnRemoveDiscountPropertyChange(evt);
            }
        });

        lblCheckupDate.setBackground(new java.awt.Color(255, 255, 255));
        lblCheckupDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCheckupDate.setForeground(new java.awt.Color(255, 0, 0));
        lblCheckupDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCheckupDate.setText("00");
        lblCheckupDate.setBorder(javax.swing.BorderFactory.createTitledBorder("Check-Up Date"));
        lblCheckupDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCheckupDate.setOpaque(true);

        lblTransactionID.setBackground(new java.awt.Color(255, 255, 255));
        lblTransactionID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTransactionID.setForeground(new java.awt.Color(255, 0, 0));
        lblTransactionID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTransactionID.setText("00");
        lblTransactionID.setBorder(javax.swing.BorderFactory.createTitledBorder("ID"));
        lblTransactionID.setOpaque(true);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemoveDiscount)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(lblTransactionID, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCheckupDate, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(233, 233, 233)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTransactionID, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCheckupDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnRemoveDiscount)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(209, 209, 209)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(0, 153, 0));
        btnAdd.setMnemonic('A');
        btnAdd.setText("ADD>>");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 0, 0));
        btnRemove.setMnemonic('R');
        btnRemove.setText("<<REMOVE");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel_icon.png"))); // NOI18N
        jButton1.setMnemonic('C');
        jButton1.setText("CANCEL");
        jButton1.setToolTipText("Click this button to CANCEL..");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_icon.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnRemove});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanel8.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel8, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTenderedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTenderedFocusLost
        txtTendered.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTendered.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        if (txtTendered.getText().trim().equals("")) {
            txtTendered.setValue(null);
            txtTendered.setText("0.00");
        } else if (txtTendered.getText().trim().equals("0")) {
            txtTendered.setText("0.00");
        }
    }//GEN-LAST:event_txtTenderedFocusLost

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String value = txtSearch.getText().trim();
        DefaultTableModel model = (DefaultTableModel) tbLaboratoryList.getModel();
        int row = 0;
        DBQueries db = new DBQueries();
        try {
            db.ConnectToDatabase();
            db.searchLaboratory(value);
            CommonMethod.clearTable(tbLaboratoryList);
            while (db.rs.next()) {

                model.insertRow(row++, new Object[]{false, db.rs.getString("lab_id"), db.rs.getString("lab_name"), db.rs.getString("lab_amount")});
            }
            if (row == 0) {
                model.insertRow(row++, new Object[]{false, "", "<html><b color='red'>NO RESULTS FOUND...</b></html>"});
                btnAdd.setEnabled(false);
                btnRemove.setEnabled(false);
            } else {
                btnAdd.setEnabled(true);
                btnRemove.setEnabled(true);
            }
        } catch (SQLException e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (db.con != null) {
                db.closeConnection();
            }

        }
    }//GEN-LAST:event_txtSearchKeyReleased
    private boolean checkLabIfExist(String labID) {
        DefaultTableModel model2 = (DefaultTableModel) tbSelectedLaboratory.getModel();
        int rowCount = model2.getRowCount(), inc = 0;
        while (inc < rowCount) {
            String tr = (String) model2.getValueAt(inc, 1);
            if (tr.equals(labID)) {
                return true;
            }
            inc++;
        }
        return false;
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbLaboratoryList.getModel();

        int rowCount = model.getRowCount(), inc = 0;
        String loop = "";
        while (inc < rowCount) {
            boolean tr = (boolean) model.getValueAt(inc, 0);
            if (tr) {
                loop += model.getValueAt(inc, 2) + "\n";
            }
            inc++;
        }
        if (loop.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No laboratory selected. Please select labaratory from the table, then, click ADD button. ", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            int CONFIRM = JOptionPane.showConfirmDialog(this, "Do you want to add?\n\n" + loop + "\n", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (CONFIRM == JOptionPane.YES_OPTION) {
                //to the second table
                int loopcount = 0;
                DefaultTableModel model2 = (DefaultTableModel) tbSelectedLaboratory.getModel();
                while (loopcount < rowCount) {
                    boolean tr = (boolean) model.getValueAt(loopcount, 0);
                    if (tr) {
                        String labID = (String) model.getValueAt(loopcount, 1);
                        String labname = (String) model.getValueAt(loopcount, 2);
                        String amount = (String) model.getValueAt(loopcount, 3);
                        boolean exist = checkLabIfExist(labID);
                        if (!exist) {
                            model2.addRow(new Object[]{false, labID, labname, amount});
                            model.setValueAt(false, loopcount, 0);
                            totalAmount += Double.parseDouble(amount);
                        } else {
                            Toolkit.getDefaultToolkit().beep();
                            JOptionPane.showMessageDialog(this, "Cannot add " + labname + " .It is already added!", "ERROR", JOptionPane.ERROR_MESSAGE);
                            model.setValueAt(false, loopcount, 0);
                        }

                        //System.out.println(labname);
                    }
                    loopcount++;
                }
                ComponentState(true);
            }
        }
        //txtTotal.setText("" + formatter.format(totalAmount));
        //txtTotalDue.setText("" + formatter.format(totalAmount - Double.parseDouble(txtLess.getText())));
        //txtChange.setText("");
        //txtTendered.setText("");
        computeSales(totalAmount, Double.parseDouble(lblPercentageDiscount.getText().replaceAll(",", "")), Double.parseDouble(txtTendered.getText().replaceAll(",", "")));


    }//GEN-LAST:event_btnAddActionPerformed
    public void computeSales(double total, double discountPercentage, double tendered) {
        txtTotal.setText(formatter.format(total));
        double discountComputation = (total / 100) * discountPercentage;
        txtLess.setText(formatter.format(discountComputation));
        double totalDue = total - discountComputation;
        txtTotalDue.setText("" + formatter.format(totalDue));
        if (tendered == 0) {
            txtTendered.setText("0.00");
            txtChange.setText("0.00");
        } else {
            txtTendered.setText("" + formatter.format(tendered));
            txtChange.setText("" + formatter.format((totalDue - tendered)));
        }
        //check status

        if (tendered <= totalDue) {
            lblChangeBalance.setText("Balance:");
            lblChangeBalance.setForeground(Color.red);
            txtChange.setForeground(Color.red);
            //txtChange.setText(formatter.format(change));
        } else {
            lblChangeBalance.setText("Change:");
            lblChangeBalance.setForeground(Color.BLUE);
            txtChange.setForeground(Color.BLUE);
            //txtChange.setText(formatter.format(change));
        }

    }
    private void txtTenderedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTenderedFocusGained
        txtTendered.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTendered.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        if (Double.parseDouble(txtTendered.getText().replaceAll(",", "")) > 0) {
            txtTendered.setCaretPosition(txtTendered.getText().length());
        } else {
            txtTendered.setText("");
            txtTendered.requestFocus();
        }

    }//GEN-LAST:event_txtTenderedFocusGained

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbSelectedLaboratory.getModel();
        int rowCount = model.getRowCount(), inc = 0;
        String loop = "";
        while (inc < rowCount) {
            boolean tr = (boolean) model.getValueAt(inc, 0);
            if (tr) {
                loop += model.getValueAt(inc, 2) + "\n";
            }
            inc++;
        }
        if (loop.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No laboratory selected. Please select labaratory from the table, then, click REMOVE button. ", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            int CONFIRM = JOptionPane.showConfirmDialog(this, "Do you want to REMOVE?\n\n" + loop + "\n", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (CONFIRM == JOptionPane.YES_OPTION) {
                //BBACK TO FIRST table
                DefaultTableModel model2 = (DefaultTableModel) tbSelectedLaboratory.getModel();
                int inc2 = 0;
                while (tbSelectedLaboratory.getRowCount() > inc2) {

                    boolean tr = (boolean) model2.getValueAt(inc2, 0);
                    String amount = (String) model2.getValueAt(inc2, 3);
                    if (tr) {
                        System.out.println(inc2);
                        //model2.removeRow(inc2);
                        ((DefaultTableModel) tbSelectedLaboratory.getModel()).removeRow(inc2);
                        totalAmount -= Double.parseDouble(amount);
                    }
                    inc2++;
                }
            }
        }
        if (tbSelectedLaboratory.getRowCount() == 0) {
            ComponentState(false);
        }

        //txtTotal.setText("" + formatter.format(totalAmount));
        //txtTotalDue.setText("" + formatter.format(totalAmount - Double.parseDouble(txtLess.getText())));
        //txtChange.setText("");
        //txtTendered.setText("");
        computeSales(totalAmount, Double.parseDouble(lblPercentageDiscount.getText().replaceAll(",", "")), Double.parseDouble(txtTendered.getText().replaceAll(",", "")));
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void txtTenderedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenderedKeyTyped
//        CommonMethod.setOnlyNumbersAccepted(evt);
//computeSales(totalAmount, Double.parseDouble(lblPercentageDiscount.getText().replaceAll(",", "")), Double.parseDouble(txtTendered.getText().replaceAll(",", "")));
     
    }//GEN-LAST:event_txtTenderedKeyTyped

    private void txtTenderedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenderedKeyReleased
        //computeSales(totalAmount, Double.parseDouble(lblPercentageDiscount.getText().replaceAll(",", "")), Double.parseDouble(txtTendered.getText().replaceAll(",", "")));
           char c = evt.getKeyChar();
        if (!txtTendered.getText().trim().equals("")) {
            if (Character.isDigit(c) || Character.isISOControl(c) || ".".indexOf(c) > -1) {
                double amountTendered = Double.parseDouble(txtTendered.getText().trim().replaceAll(",", "")) + Double.parseDouble(txtLess.getText().replaceAll(",", ""));
                double change = totalAmount - amountTendered;
                System.out.println(totalAmount + " - " + amountTendered + "=" + (totalAmount - amountTendered));
                if (change >= 0) {
                    lblChangeBalance.setText("Balance:");
                    lblChangeBalance.setForeground(Color.red);
                    txtChange.setForeground(Color.red);
                    txtChange.setText(formatter.format(change));
                } else {
                    lblChangeBalance.setText("Change:");
                    lblChangeBalance.setForeground(Color.BLUE);
                    txtChange.setForeground(Color.BLUE);
                    txtChange.setText(formatter.format(change));
                }
            } else {
                evt.consume();
                Toolkit.getDefaultToolkit().beep();

            }

        } else {
            lblChangeBalance.setText("Change:");
            lblChangeBalance.setForeground(Color.black);
            txtChange.setForeground(Color.black);
            txtChange.setText("");
        }

    }//GEN-LAST:event_txtTenderedKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (tbSelectedLaboratory.getRowCount() == 0) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No Laboratory selected! Please add laboratory first.", "ERROR", JOptionPane.ERROR_MESSAGE);
            btnAdd.requestFocus();
            return;
        }
        //validation
        String amountTendered = txtTendered.getText().trim();
        if (Double.parseDouble(amountTendered) == 0) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No AMOUNT TENDERED found. Please enter amount tendered!", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtTendered.requestFocus();
            return;
        }
        if (Double.parseDouble(txtChange.getText().replaceAll(",", "")) > Double.parseDouble(txtTotalDue.getText().replaceAll(",", ""))) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Amount tendered is lesser than total due. Please check amount entered!", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtTendered.requestFocus();
            return;
        }
        if (lblTransactionID.getText().trim().equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No Checkup ID found. Please contact the System Administrator for help and assisstance!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //confirm first
        int confirm = JOptionPane.showConfirmDialog(this, "Do want to this to save this transaction?", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.NO_OPTION) {
            //this.dispose();
            return;
        }

        final dlgLoading loading = new dlgLoading(this, true, "Saving Patient Check-up Information...");
        SwingWorker<?, ?> worker = new SwingWorker<Void, Integer>() {
            @Override

            protected Void doInBackground() throws Exception {
                //Date checkUpdate = (Date) ft.parse(lblCheckupDate.getText());
                SaveTransaction();
                return null;
            }

            protected void done() {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                loading.setVisible(false);
                loading.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            }
        };
        worker.execute();
        loading.setVisible(true);
    }//GEN-LAST:event_btnSaveActionPerformed
    private void SaveTransaction() throws Exception {
        DBQueries db = new DBQueries();
        int checkupID = Integer.parseInt(lblTransactionID.getText().trim());
        String patientID = CommonMethod.TrimPatientID(lblPatientID.getText().trim());
        //double consultationFee = Double.parseDouble(txtConsultationFee.getText().replaceAll(",", ""));
        double amountParseTendered = Double.parseDouble(txtTendered.getText().replaceAll(",", ""));
        double changeAmount = Double.parseDouble(txtChange.getText().replaceAll(",", ""));
        String discountName = txtLess.getName().trim();
        int discountPercentage = Integer.parseInt(lblPercentageDiscount.getText());
        int loopInsert = 0;
        try {
            db.ConnectToDatabase();
            db.con.setAutoCommit(false);
            boolean onAdded = db.checkCheckUpStatus(patientID, lblCheckupDate.getText());
            if (onAdded) {
                int confirm = JOptionPane.showConfirmDialog(this, lblPatientName.getText() + " was already added on the check-up list.\n\nDo you still want to proceed?", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (confirm == JOptionPane.NO_OPTION) {
                    dlgLoading.lblOutput.setText("Cancelling Transaction...");
                    return;
                }
            }
            int success = db.insertCheckupInfo(checkupID, patientID, amountParseTendered, changeAmount, frmMain.USERNAME, discountName, discountPercentage, lblCheckupDate.getText());
            int rowCount = tbSelectedLaboratory.getRowCount();
            if (rowCount > 0) {
                for (int i = 0; i < rowCount; i++) {
                    String labID = tbSelectedLaboratory.getValueAt(i, 1).toString();
                    double labAmount = Double.parseDouble(tbSelectedLaboratory.getValueAt(i, 3).toString());
                    loopInsert += db.insertCheckupLaboratories(checkupID, labID, labAmount);
                }
            }
            if ((success + loopInsert) == (rowCount + success)) {
                // Toolkit.getDefaultToolkit().beep();
                //JOptionPane.showMessageDialog(null, "Inserted Successfully!", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                dlgPrintReceiptAndForm print = new dlgPrintReceiptAndForm(main, this, true);
                print.setVisible(true);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Insert Failed!. Please contact the System Administrator for help.", "FAILED", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(dlgCheckUp.this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            db.con.rollback();

        } finally {
            if (db.con != null) {
                db.con.commit();
                db.closeConnection();

            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to close this window?", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRemoveDiscountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveDiscountMouseClicked

        if (btnRemoveDiscount.getText().equals("ADD DISCOUNT")) {
            dlgDiscount discount = new dlgDiscount(main, this, true);
            discount.setVisible(true);
        } else {
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove the discount?", "CONFIRM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirm == JOptionPane.YES_OPTION) {
                lblPercentageDiscount.setText("0");
                lblPercentageDiscount.setName("");
                txtLess.setName("");
                txtLess.setText("0.00");
                computeSales(totalAmount, Double.parseDouble(lblPercentageDiscount.getText().replaceAll(",", "")), Double.parseDouble(txtTendered.getText().replaceAll(",", "")));
                btnRemoveDiscount.setText("ADD DISCOUNT");
            }
        }
    }//GEN-LAST:event_btnRemoveDiscountMouseClicked

    private void btnRemoveDiscountPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnRemoveDiscountPropertyChange
        if (btnRemoveDiscount.getText().equals("RMV DISCOUNT")) {
            btnRemoveDiscount.setForeground(Color.red);
        } else {
            btnRemoveDiscount.setForeground(Color.black);
        }
    }//GEN-LAST:event_btnRemoveDiscountPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgCheckUp dialog = new dlgCheckUp(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(dlgCheckUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    java.util.logging.Logger.getLogger(dlgCheckUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    java.util.logging.Logger.getLogger(dlgCheckUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                    java.util.logging.Logger.getLogger(dlgCheckUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    public javax.swing.JLabel btnRemoveDiscount;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblChangeBalance;
    private javax.swing.JLabel lblCheckupDate;
    private javax.swing.JLabel lblDiscount;
    public javax.swing.JLabel lblPatientID;
    public javax.swing.JLabel lblPatientName;
    public javax.swing.JLabel lblPercentageDiscount;
    private javax.swing.JLabel lblTransactionID;
    private javax.swing.JTable tbLaboratoryList;
    public javax.swing.JTable tbSelectedLaboratory;
    public javax.swing.JTextField txtChange;
    public javax.swing.JTextField txtLess;
    private javax.swing.JTextField txtSearch;
    public javax.swing.JFormattedTextField txtTendered;
    public javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtTotalDue;
    // End of variables declaration//GEN-END:variables
}
